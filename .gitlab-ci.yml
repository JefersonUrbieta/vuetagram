stages:
    - Build
    - Quality
    - Publish
    - Production

# ----------------------------------------------------------------------------------------------------------------------
# BUILD
# ----------------------------------------------------------------------------------------------------------------------

.build:commons: &build
    image: node:lts
    stage: Build
    only:
        - merge_requests
        - master
        - tags
    script:
        - npm install
        - npm run build

build_api:
    <<: *build
    before_script:
        - cd api
    cache:
        key: ${CI_COMMIT_REF_SLUG}-api
        paths:
            - api/node_modules/

build_app:
    <<: *build
    before_script:
        - cd app
    cache:
        key: ${CI_COMMIT_REF_SLUG}-app
        paths:
            - app/dist/
            - app/node_modules/

# ----------------------------------------------------------------------------------------------------------------------
# BUILD
# ----------------------------------------------------------------------------------------------------------------------

.quality:commons: &quality
    image: node:lts
    stage: Quality
    only:
        - merge_requests
        - master
        - tags
    script:
        - npm run lint

quality_api:
    <<: *quality
    before_script:
        - cd api
    cache:
        key: ${CI_COMMIT_REF_SLUG}-api
        policy: pull
        paths:
            - api/node_modules/

quality_app:
    <<: *quality
    before_script:
        - cd app
    cache:
        key: ${CI_COMMIT_REF_SLUG}-app
        policy: pull
        paths:
            - app/dist/

# ----------------------------------------------------------------------------------------------------------------------
# PUBLISH
# ----------------------------------------------------------------------------------------------------------------------

.publish:commons: &publish
    image: docker:latest
    stage: Publish
    only:
        - master
        - tags
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: "overlay"
    script:
        - echo "$DOCKER_TOKEN" | docker login registry.gitlab.com -u $DOCKER_USERNAME --password-stdin
        - docker build --pull --no-cache --tag $TAGNAME .
        - docker push $TAGNAME
    after_script:
        - docker logout

publish_api:
    <<: *publish
    variables:
        TAGNAME: registry.gitlab.com/jethas/arremate-cambio/arremate-cambio/api:latest
    before_script:
        - cd api
    cache:
        key: ${CI_COMMIT_REF_SLUG}-api
        policy: pull
        paths:
            - api/node_modules/

publish_app:
    <<: *publish
    variables:
        TAGNAME: registry.gitlab.com/jethas/arremate-cambio/arremate-cambio/app:latest
    before_script:
        - cd app
    cache:
        key: ${CI_COMMIT_REF_SLUG}-app
        policy: pull
        paths:
            - app/dist/

# ----------------------------------------------------------------------------------------------------------------------
# DEPLOY
# ----------------------------------------------------------------------------------------------------------------------

deploy_production:
    image: node:latest
    stage: Production
    only:
        - master
        - tags
    environment:
        name: production
        url: https://${PROXY_DOMAIN}
    before_script:
        - mkdir -p ~/.ssh
        - echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - eval $(ssh-agent -s)
        - cat ~/.ssh/id_rsa
        - ssh-add ~/.ssh/id_rsa
        - ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
    script:
        - rm -rf environment.env
        - printf "NODE_ENV=production\nDB_URL=${DB_URL}\nPROXY_DOMAIN=${PROXY_DOMAIN}\nURL_BASE=https://${PROXY_DOMAIN}\n" > environment.env
        - scp -r ./environment.env ./docker-compose.yml ${SERVER_USER}@${SERVER_IP}:~/
        - ssh ${SERVER_USER}@${SERVER_IP} "docker-compose down --volumes --rmi all; docker-compose pull; docker-compose up -d"
